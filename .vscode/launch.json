// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "(gdb) Launch", // 配置名稱，將會在啟動配置的下拉選單中顯示
            "type": "cppdbg", // 配置型別，這裡只能為cppdbg
            "request": "launch", // 請求配置型別，可以為launch（啟動）或attach（附加）
            "program": "${fileDirname}/${fileBasenameNoExtension}.out", // 將要進行除錯的程式的路徑
            "args": [], // 程式除錯時傳遞給程式的命令列引數，一般設為空即可
            "stopAtEntry": false, // 設為true時程式將暫停在程式入口處，我一般設定為true
            "cwd": "${workspaceFolder}", // 除錯程式時的工作目錄
            "environment": [], // （環境變數？）
            "externalConsole": false, // 除錯時是否顯示控制檯視窗，一般設定為true顯示控制檯
            "internalConsoleOptions": "neverOpen", // 如果不設為neverOpen，除錯時會跳到“除錯控制檯”選項卡，你應該不需要對gdb手動輸命令吧？
            "MIMode": "gdb", // 指定連線的偵錯程式，可以為gdb或lldb。但目前lldb在windows下沒有預編譯好的版本。
            // "miDebuggerPath": "gdb.exe", // 偵錯程式路徑，Windows下字尾不能省略，Linux下則去掉
            "setupCommands": [ // 用處未知，模板如此
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true //原本是false
                }
            ],
            "preLaunchTask": "Compile" ,// 除錯會話開始前執行的任務，一般為編譯程式。與tasks.json的label相對應
            "miDebuggerPath": "/usr/bin/gdb"
        }
    ]
}